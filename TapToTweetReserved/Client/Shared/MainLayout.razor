@using  System.Security.Principal
@inherits LayoutComponentBase
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthStateProvider

<div @onclick="CloseMenu">

    <header class="@HeaderCssClass">
        <h1>Tap To Tweet Reserved</h1>
        @if (this.User?.IsAuthenticated == true)
        {
            <a class="menu" @onclick="ToggleMenuExapnding" @onclick:stopPropagation="true">menu</a>
            <nav>
                @foreach (var menuItem in this.UIContext.MenuItems)
                {
                    <div><a href="@menuItem.Url">@menuItem.Caption</a></div>
                }

                <div>@User.Name | <a id="sign-out" @onclick="OnClickSignOut">Sign Out</a></div>
            </nav>
        }
    </header>

    <div class="body-wrapper">
        <CascadingValue Value="UIContext">
            @Body
        </CascadingValue>
    </div>

</div>

@code {
    [CascadingParameter]
    private Task<AuthenticationState>
    authenticationStateTask
    { get; set; }

    private IIdentity User;

    private bool MenuIsExpanded;

    private string HeaderCssClass => MenuIsExpanded ? "expand-menu" : "";

    private UIContext UIContext = new UIContext();

    protected override async Task OnInitializedAsync()
    {
        this.NavigationManager.LocationChanged += NavigationManager_LocationChanged;
        this.UIContext.StateHasChanged += UIContext_StateHasChanged;
        await RefreshAuthenticationStateAsync();
    }

    private void NavigationManager_LocationChanged(object sender, EventArgs args)
    {
        //this.UIContext.Reset();
    }

    private void UIContext_StateHasChanged(object sender, EventArgs args)
    {
        this.StateHasChanged();
    }

    private async Task RefreshAuthenticationStateAsync()
    {
        var authenticationState = await this.authenticationStateTask;
        this.User = authenticationState?.User?.Identity;
    }

    private void ToggleMenuExapnding()
    {
        this.MenuIsExpanded = !this.MenuIsExpanded;
    }

    private void CloseMenu()
    {
        this.MenuIsExpanded = false;
    }

    private async Task OnClickSignOut()
    {
        await this.HttpClient.PostJsonAsync("/Auth/SignOut", null);
        await (AuthStateProvider as AppAuthenticationStateProvider)?.RefreshAsync();
        await RefreshAuthenticationStateAsync();
    }
}
