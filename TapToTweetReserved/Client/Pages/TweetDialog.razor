@implements IDisposable
@inject Toolbelt.Blazor.I18nText.I18nText I18nText
@inject ReservedTweets.ReservedTweetsClient ReservedTweetsClient

<Dialog @ref="Dialog">
    <Caption>
        @GetDialogCaption()
    </Caption>
    <Body>
        <span style="white-space:pre-line;">@(this.Tweet?.TextToTweet)</span>
    </Body>
    <Action>
        <button type="button" @onclick="Close" class="@(GetButtonCaption() == "" ? "hidden" : "")">
            @GetButtonCaption()
        </button>
    </Action>
</Dialog>

@code
{
    private Localized Localized = new();

    private Dialog? Dialog;

    private ReservedTweet? Tweet;

    private System.Timers.Timer Timer = new System.Timers.Timer { Interval = 1000, AutoReset = true };

    private enum ProgressStates
    {
        Step0_Error,
        Step1_Before3Sec,
        Step2_Before2Sec,
        Step3_Before1Sec,
        Step4_Posting,
        Step5_Complete
    }

    private ProgressStates ProgressState;

    public TweetDialog()
    {
        this.Timer.Elapsed += Timer_Elapsed;
    }

    protected override async Task OnInitializedAsync()
    {
        this.Localized = await I18nText.GetTextTableAsync<Localized>(this);
    }


    public async Task<bool> OpenAndPost(ReservedTweet tweet)
    {
        this.Tweet = tweet;
        ProgressState = ProgressStates.Step1_Before3Sec;
        this.Timer.Start();
        this.StateHasChanged();

        if (this.Dialog == null) return false;

        var result = await this.Dialog.Show();

        return result != null && (bool)result;
    }

    private string GetDialogCaption()
    {
        switch (this.ProgressState)
        {
            case ProgressStates.Step0_Error: return Localized.Tweet_Step0_Error;
            case ProgressStates.Step1_Before3Sec: return Localized.Tweet_Step1_Before3Sec;
            case ProgressStates.Step2_Before2Sec: return Localized.Tweet_Step2_Before2Sec;
            case ProgressStates.Step3_Before1Sec: return Localized.Tweet_Step3_Before1Sec;
            case ProgressStates.Step4_Posting: return Localized.Tweet_Step4_Posting;
            case ProgressStates.Step5_Complete: return Localized.Tweet_Step5_Complete;
            default: return "";
        }
    }

    private string GetButtonCaption()
    {
        switch (this.ProgressState)
        {
            case ProgressStates.Step0_Error:
                return Localized.Close;
            case ProgressStates.Step4_Posting:
            case ProgressStates.Step5_Complete:
                return "";
            default:
                return Localized.Cancel;
        }
    }

    private async void Timer_Elapsed(object? sender, EventArgs args)
    {
        if (this.ProgressState == ProgressStates.Step5_Complete)
        {
            this.Close();
            return;
        }

        this.ProgressState++;
        this.StateHasChanged();

        if (this.ProgressState == ProgressStates.Step4_Posting)
        {
            Timer.Stop();
            try
            {
                if (this.Tweet != null)
                {
                    await this.ReservedTweetsClient.TweetAsync(new ReservedTweetId(this.Tweet.Id));
                }
            }
            catch (Exception e)
            {
                Console.WriteLine(e.ToString());
                this.ProgressState = ProgressStates.Step0_Error;
                this.StateHasChanged();
                return;
            }

            this.ProgressState = ProgressStates.Step5_Complete;
            this.StateHasChanged();

            Timer.Start();
        }
    }

    private void Close()
    {
        if (this.Dialog == null) throw new NullReferenceException();
        this.Timer.Stop();
        this.StateHasChanged();
        this.Dialog.Close(this.ProgressState >= ProgressStates.Step4_Posting);
    }

    public void Dispose()
    {
        this.Timer.Elapsed -= Timer_Elapsed;
        this.Timer.Dispose();
    }
}