@inject Toolbelt.Blazor.I18nText.I18nText I18nText

<div class="languages-bar">
    <span class="material-icons">language</span>
    <span class="languages">
        @foreach (var lang in SupportedLanguage.List)
        {
            <a @onclick="@(() => OnClickLanguage(lang.LangCode))">
                @lang.Caption
            </a>
        }
        @if (_CurrentLangInitialized)
        {
            <span class="current-lang-marker" style="left: calc(@_CurrentLangCodeIndex * var(--langcode-width));"></span>
        }
    </span>
</div>

@code
{
    private bool _CurrentLangInitialized = false;

    private int _CurrentLangCodeIndex = 0;

    protected override async Task OnInitializedAsync()
    {
        var langCode = await this.I18nText.GetCurrentLanguageAsync();
        this.UpdateCurrentLangCodeIndex(langCode);
        _CurrentLangInitialized = true;
    }

    private Task OnClickLanguage(string langCode)
    {
        this.UpdateCurrentLangCodeIndex(langCode);
        return this.I18nText.SetCurrentLanguageAsync(langCode);
    }

    private void UpdateCurrentLangCodeIndex(string langCode)
    {
        langCode = langCode.Split('-').First();
        var index = Array.IndexOf(SupportedLanguage.List.Select(l => l.LangCode).ToArray(), langCode);
        _CurrentLangCodeIndex = index switch { -1 => 0, _ => index };
        Console.WriteLine($"_CurrentLangCodeIndex is: {_CurrentLangCodeIndex}");
    }
}