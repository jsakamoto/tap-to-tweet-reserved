@if (this.State != DialogState.Closed)
{
    <div class="dialog-holder @(IsOpened ? "visible" : "") @CssClass">
        <div class="screen-mask" @onclick="_OnClickScreenMask"></div>

        <div class="dialog">
            <div class="caption">
                @Caption
            </div>
            <div class="body">
                @Body
            </div>
            <div class="action">
                @Action
            </div>
        </div>
    </div>
}

@code
{
    [Parameter]
    public string CssClass { get; set; } = "";

    [Parameter]
    public RenderFragment? Caption { get; set; }

    [Parameter]
    public RenderFragment? Body { get; set; }

    [Parameter]
    public RenderFragment? Action { get; set; }

    [Parameter]
    public Func<Task>? OnClickScreenMask { get; set; }

    private TaskCompletionSource<object?>? CurrentTaskSrc;

    private enum DialogState
    {
        Closed,
        Opening,
        Opened,
        Closing
    }

    private DialogState State = DialogState.Closed;

    public bool IsOpened => this.State == DialogState.Opened;

    public async Task<object?> Show()
    {
        this.CurrentTaskSrc = new();
        this.State = DialogState.Opening;
        this.StateHasChanged();
        await Task.Delay(50);
        this.State = DialogState.Opened;
        this.StateHasChanged();
        return await this.CurrentTaskSrc.Task;
    }

    public void Close(object? result)
    {
        this.State = DialogState.Closing;
        this.CurrentTaskSrc?.SetResult(result);
        this.StateHasChanged();
        Task.Delay(200).ContinueWith(_ =>
        {
            this.State = DialogState.Closed;
            this.StateHasChanged();
        });
    }

    public void _OnClickScreenMask()
    {
        this.OnClickScreenMask?.Invoke();
    }
}