@using System.Globalization
@using System.Text.RegularExpressions
@inject IJSRuntime JS
@inject NavigationManager NavigationManager
@inject Toolbelt.Blazor.I18nText.I18nText I18nText

<MessageBox @ref="MessageBox" />

<form>

    <fieldset>
        <div>
            <textarea autofocus
                      required
                      @bind="EditingTextToTweet" @bind:event="oninput"></textarea>
        </div>

        <div id="char-counter" class="@GetCharCounterCssClass()">
            @(MaxTweetChar - CharCount)
        </div>
    </fieldset>

    <footer class="col2">
        <button type="button" @onclick="OnClickOK" disabled="@IsInvalidForm()">@Localized.OK</button>
        <button type="button" class="cancel" @onclick="OnClickCancel">@Localized.Cancel</button>
    </footer>

</form>

@code
{
    private Localized Localized = new Localized();

    private const int MaxTweetChar = 280;

    private const int WarningTweetChar = 20;

    [Parameter]
    public string TextToTweet { get; set; } = "";

    private string? EditingTextToTweet = null;

    private string? OriginalTextToTweet = null;

    [Parameter]
    public Func<string?, Task>? OnOK { get; set; }

    private bool IsOverflowTweetChars => this.CharCount > MaxTweetChar;

    private IJSInProcessRuntime? JSInProcess;

    private MessageBox? MessageBox;

    private string? LastCharCountedText = null;

    // To make regular expression pattern, https://regex101.com/ is very usefull.
    private static readonly Regex Regex = new Regex(@"(?<pre>^|[\s~!%^&*\(\)\+=\[\]\{\}\|\\:;'\?,<>])(https?:\/\/)?([a-z0-9\-]{1,63}\.)+(?<tld>[a-z\u00ff-\uffff]{2,20})(((:\d+\/)|\/)([%!?&#.]*[\w\-=#\/]+\/?)*)?", RegexOptions.Multiline | RegexOptions.IgnoreCase | RegexOptions.Compiled);

    private int _CharCount = 0;

    private int CharCount
    {
        get
        {
            if (LastCharCountedText != this.EditingTextToTweet && this.EditingTextToTweet != null)
            {
                var n = 0;
                var translated = Regex.Replace(this.EditingTextToTweet, m =>
                {
                    if (!TLDs.All.Contains(m.Groups["tld"].Value)) return m.Value;
                    n += 23;
                    return m.Groups["pre"].Value;
                });

                var enumerator = StringInfo.GetTextElementEnumerator(translated);
                while (enumerator.MoveNext())
                {
                    var text = enumerator.GetTextElement();
                    n += (text.Length == 1 && ((int)text[0]) < 256) ? 1 : 2;
                }
                this._CharCount = n;
                this.LastCharCountedText = this.EditingTextToTweet;
            }
            return this._CharCount;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        this.JSInProcess = this.JS as IJSInProcessRuntime;
        this.EditingTextToTweet = this.TextToTweet;
        this.OriginalTextToTweet = this.TextToTweet;
        this.Localized = await I18nText.GetTextTableAsync<Localized>(this);
    }

    public string GetCharCounterCssClass()
    {
        var leftChar = (MaxTweetChar - this.CharCount);
        return leftChar <= 0 ? "reach-limited" : leftChar <= WarningTweetChar ? "warning" : "";
    }

    private bool IsInvalidForm()
    {
        return string.IsNullOrEmpty(this.EditingTextToTweet) || this.IsOverflowTweetChars;
    }

    private async Task OnClickOK()
    {
        if (this.OnOK != null) await this.OnOK.Invoke(this.EditingTextToTweet);
    }

    public async Task OnClickCancel()
    {
        if (this.MessageBox == null) throw new NullReferenceException();

        if (this.EditingTextToTweet != this.OriginalTextToTweet)
        {
            var res = await this.MessageBox.Show(
                caption: Localized.Cancel,
                message: Localized.Confirm_DiscardChanges,
                buttons: new[] { Localized.Yes, Localized.No }
            );
            if (res != Localized.Yes) return;
        }
        this.GoBack();
    }

    private void GoBack()
    {
        this.NavigationManager.NavigateTo("/list-of-editmode");
    }
}
