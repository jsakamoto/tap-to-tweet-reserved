@using System.Globalization
@inject IJSRuntime JS
@inject NavigationManager NavigationManager

<form>

    <fieldset>
        <div>
            <textarea autofocus
                      required
                      @bind="TextToTweet" @bind:event="oninput"></textarea>
        </div>

        <div id="char-counter" class="@GetCharCounterCssClass()">
            @(MaxTweetChar - CharCount)
        </div>
    </fieldset>

    <footer class="col2">
        <button type="button" @onclick="OnClickOK" disabled="@IsInvalidForm()">OK</button>
        <button type="button" class="cancel" @onclick="GoBack">Cancel</button>
    </footer>

</form>

@code
{
    private const int MaxTweetChar = 280;

    [Parameter]
    public string TextToTweet { get; set; } = "";

    [Parameter]
    public Func<string, Task> OnOK { get; set; }

    private bool IsOverflowTweetChars => this.CharCount > MaxTweetChar;

    private IJSInProcessRuntime JSInProcess;

    private int CharCount
    {
        get
        {
            // Regex class of .NET running on mono.wasm is very slow,
            // therefore, use the power of the JavaScript via JSInterop.
            var translated = this.JSInProcess.Invoke<string>("sanitizeUrl", TextToTweet);

            var n = 0;
            var enumerator = StringInfo.GetTextElementEnumerator(translated);
            while (enumerator.MoveNext())
            {
                var text = enumerator.GetTextElement();
                n += (text.Length == 1 && ((int)text[0]) < 256) ? 1 : 2;
            }
            return n;
        }
    }

    protected override void OnInitialized()
    {
        this.JSInProcess = this.JS as IJSInProcessRuntime;
    }

    public string GetCharCounterCssClass()
    {
        return this.IsOverflowTweetChars ? "overflow" : "";
    }

    private bool IsInvalidForm()
    {
        return string.IsNullOrEmpty(this.TextToTweet) || this.IsOverflowTweetChars;
    }

    private async Task OnClickOK()
    {
        await this.OnOK?.Invoke(this.TextToTweet);
    }

    private void GoBack()
    {
        this.NavigationManager.NavigateTo("/list-of-editmode");
    }
}
