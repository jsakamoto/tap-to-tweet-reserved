@page "/list-of-editmode"
@attribute [Authorize]
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject Toolbelt.Blazor.I18nText.I18nText I18nText

<MessageBox @ref="MessageBox" />

<ReservedTweetsList CssClass="editor-index" OnClickTweet="SelectTweet" OnDblClickTweet="EditTweet" @ref="ReservedTweetsList">

    <BeforeList>
        <div class="guide">
            <div class="text">
                @Localized.Guide_in_Edit
            </div>
        </div>
    </BeforeList>

    <AfterList>
        <footer class="col6 @GetFooterCssClass()">
            <a href="/addnew">
                <span class="material-icons">add</span>
                <span class="help-text">@Localized.Add</span>
            </a>
            <a @onclick="MoveUpTweet" class="selected-only">
                <span class="material-icons">arrow_upward</span>
                <span class="help-text">@Localized.Up</span>
            </a>
            <a @onclick="MoveDownTweet" class="selected-only">
                <span class="material-icons">arrow_downward</span>
                <span class="help-text">@Localized.Down</span>
            </a>
            <a @onclick="EditTweet" class="selected-only">
                <span class="material-icons">edit</span>
                <span class="help-text">@Localized.Edit</span>
            </a>
            <a @onclick="DeleteTweet" class="selected-only">
                <span class="material-icons">delete</span>
                <span class="help-text">@Localized.Delete</span>
            </a>
            <a @onclick="ReloadTweet" class="selected-tweeted-only">
                <span class="material-icons">replay</span>
                <span class="help-text">@Localized.Reload</span>
            </a>
        </footer>
    </AfterList>
</ReservedTweetsList>

@code
{
    [CascadingParameter]
    private UIContext UIContext { get; set; }

    private Localized Localized = new Localized();

    private ReservedTweetsList ReservedTweetsList;

    private MessageBox MessageBox;

    protected override async Task OnInitializedAsync()
    {
        this.Localized = await I18nText.GetTextTableAsync<Localized>(this);
        this.UIContext.PageTitle = () => Localized.EditMode;
        this.UIContext.SetMenuItem(new MenuItem { Caption = () => Localized.GoToHome, Url = "/" });
    }

    private Task SelectTweet(SelectableReservedTweet tweet)
    {
        tweet.Selected = !tweet.Selected;
        return Task.CompletedTask;
    }

    private string GetFooterCssClass()
    {
        var cssClasses = new List<string>();
        var reservedTweets = this.ReservedTweetsList.ReservedTweets;
        if (reservedTweets?.Any(t => t.Selected) != true) cssClasses.Add("no-selected-any");
        if (reservedTweets?.Where(t => t.IsTweeted).Any(t => t.Selected) != true) cssClasses.Add("no-selected-tweeted");
        return string.Join(' ', cssClasses);
    }

    private Task MoveUpTweet() => MoveUpOrDownTweetAsync(direction: -1);

    private Task MoveDownTweet() => MoveUpOrDownTweetAsync(direction: +1);

    private class ReservedTweetComparere : IComparer<ReservedTweet>
    {
        private int Direction;
        public ReservedTweetComparere(int direction) { Direction = direction; }
        public int Compare(ReservedTweet a, ReservedTweet b) => -1 * Direction * (a.Order - b.Order);
    }

    private async Task MoveUpOrDownTweetAsync(int direction)
    {
        var reservedTweets = this.ReservedTweetsList.ReservedTweets;

        var limit = (reservedTweets.Length - 1) * ((1 + direction) / 2);
        var comparer = new ReservedTweetComparere(direction);
        var selectedTweets = reservedTweets
            .Where(t => t.Selected)
            .OrderBy(t => t, comparer)
            .ToList();

        var orderdTweets = reservedTweets.OrderBy(t => t.Order).ToList();
        foreach (var tweet in selectedTweets)
        {
            var index = orderdTweets.IndexOf(tweet);
            if (index == limit) break;
            orderdTweets.RemoveAt(index);
            orderdTweets.Insert(index + direction, tweet);
        }
        for (var n = 0; n < orderdTweets.Count; n++)
        {
            var tweet = orderdTweets[n];
            if (tweet.Order != n + 1)
            {
                tweet.Order = n + 1;
                await this.HttpClient.PutAsJsonAsync($"/api/reservedtweets/{tweet.Id}", tweet);
            }
        }

        this.ReservedTweetsList.RefreshOrderdReservedTweets();
    }

    private void EditTweet()
    {
        var reservedTweets = this.ReservedTweetsList.ReservedTweets;
        var editTarget = reservedTweets.FirstOrDefault(t => t.Selected);
        if (editTarget != null)
        {
            this.NavigationManager.NavigateTo($"/edit/{editTarget.Id}");
        }
    }

    private Task EditTweet(SelectableReservedTweet tweet)
    {
        this.NavigationManager.NavigateTo($"/edit/{tweet.Id}");
        return Task.CompletedTask;
    }

    private async Task DeleteTweet()
    {
        var res = await this.MessageBox.Show(
            caption: Localized.Delete,
            message: Localized.Confirm_DeleteTweets,
            buttons: new[] { Localized.OK, Localized.Cancel });

        if (res == Localized.OK)
        {
            var reservedTweets = this.ReservedTweetsList.ReservedTweets;
            foreach (var tweet in reservedTweets.Where(t => t.Selected))
            {
                await this.HttpClient.DeleteAsync($"/api/reservedtweets/{tweet.Id}");
                this.ReservedTweetsList.RemoveTweetFromList(tweet);
            }
        }
    }

    private async Task ReloadTweet()
    {
        var reservedTweets = this.ReservedTweetsList.ReservedTweets;
        foreach (var tweet in reservedTweets.Where(t => t.Selected && t.IsTweeted))
        {
            tweet.IsTweeted = false;
            await this.HttpClient.PutAsJsonAsync($"/api/reservedtweets/{tweet.Id}", tweet);
        }
    }
}

