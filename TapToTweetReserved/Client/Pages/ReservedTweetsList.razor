@inject Toolbelt.Blazor.I18nText.I18nText I18nText
@inject ReservedTweets.ReservedTweetsClient ReservedTweetsClient

<div class="@CssClass @GetIndexCssClass()">

    @BeforeList

    @if (this.ReservedTweets != null)
    {
        <ul class="reserved-tweets">
            @foreach (var tweet in this.ReservedTweets)
            {
                <li @key="tweet.Message.Id" class="@GetTweetCssClass(tweet)" style="@GetTweetStyle(tweet)">
                    <a @onclick="@(() => _OnClickTweet(tweet))" @ondblclick="@(() => _OnDblClickTweet(tweet))">
                        <span style="white-space:pre-line;">@tweet.Message.TextToTweet</span>
                    </a>
                    <span class="tweeted-mark">@Localized.Tweeted</span>
                </li>
            }
        </ul>
    }

    @AfterList

</div>
@code
{
    private Localized Localized = new Localized();

    [Parameter]
    public string? CssClass { get; set; }

    [Parameter]
    public RenderFragment? BeforeList { get; set; }

    [Parameter]
    public RenderFragment? AfterList { get; set; }

    [Parameter]
    public Func<SelectableReservedTweet, bool>? Filter { get; set; }

    [Parameter]
    public EventCallback<SelectableReservedTweet> OnClickTweet { get; set; }

    [Parameter]
    public EventCallback<SelectableReservedTweet> OnDblClickTweet { get; set; }

    private SelectableReservedTweet[]? ReservedTweets = null;

    private SelectableReservedTweet[]? OrderdReservedTweets = null;

    protected override async Task OnInitializedAsync()
    {
        this.Localized = await I18nText.GetTextTableAsync<Localized>(this);
        var collection = await this.ReservedTweetsClient.GetAllAsync(new Google.Protobuf.WellKnownTypes.Empty());
        this.ReservedTweets = collection.Items.Select(r => new SelectableReservedTweet(r)).ToArray();
        this.RefreshOrderdReservedTweets();
    }

    public bool TryGetReservedTweets([NotNullWhen(true)] out SelectableReservedTweet[]? reservedTweets)
    {
        reservedTweets = this.ReservedTweets;
        return reservedTweets != null;
    }

    protected override void OnParametersSet()
    {
        this.RefreshOrderdReservedTweets();
    }

    public void RefreshOrderdReservedTweets()
    {
        if (this.ReservedTweets == null) return;
        var filter = this.Filter ?? (_ => true);

        this.ReservedTweets = this.ReservedTweets.Where(filter).ToArray();
        this.OrderdReservedTweets = this.ReservedTweets.OrderBy(t => t.Message.Order).ToArray();
    }

    private string GetIndexCssClass()
    {
        var cssClass = new List<string>();
        if (this.ReservedTweets != null) cssClass.Add("tweets-loaded");
        if (this.ReservedTweets?.Any() == true) cssClass.Add("tweets-exists");
        return string.Join(" ", cssClass);
    }

    private string GetTweetCssClass(SelectableReservedTweet tweet)
    {
        var cssClasses = new List<string>();
        if (tweet.Selected) cssClasses.Add("selected");
        if (tweet.Message.IsTweeted) cssClasses.Add("tweeted");
        return string.Join(' ', cssClasses);
    }

    private string GetTweetStyle(SelectableReservedTweet tweet)
    {
        if (this.OrderdReservedTweets == null) return "";
        var orderdIndex = Array.IndexOf(this.OrderdReservedTweets, tweet);
        return $"top: {5 * orderdIndex}rem;";
    }

    private async Task _OnClickTweet(SelectableReservedTweet tweet)
    {
        await this.OnClickTweet.InvokeAsync(tweet);
    }

    private async Task _OnDblClickTweet(SelectableReservedTweet tweet)
    {
        await OnDblClickTweet.InvokeAsync(tweet);
    }

    public void RemoveTweetFromList(SelectableReservedTweet tweet)
    {
        if (this.ReservedTweets == null) return;
        this.ReservedTweets = this.ReservedTweets.Where(t => t != tweet).ToArray();
        this.RefreshOrderdReservedTweets();
    }
}